version: "3.9"
services:

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3.9-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin
      RABBITMQ_QUEUE_NAME: mongo_queue
    networks:
      - nestjs-msa-network
    restart: always

  db:
    container_name: db
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    restart: always
    networks:
      - nestjs-msa-network

  db_mongo:
    container_name: db_mongo
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodata:/data/db
      - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    restart: always 
    networks:
      - nestjs-msa-network

  backend-psql:
    container_name: backend-psql
    build:
      context: ./backend-psql
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    restart: always
    depends_on:
      - db
    networks:
      - nestjs-msa-network

  backend-mongo:
    container_name: backend-mongo
    build:
      context: ./backend-mongo
      dockerfile: Dockerfile
    ports:
      - 8001:8001
    restart: always
    depends_on:
      - db
    networks:
      - nestjs-msa-network

volumes:
  pgdata:
  mongodata:
  # rabbitmqdata:
  # rabbitmqlog:
  
networks:
  nestjs-msa-network:
    driver: bridge